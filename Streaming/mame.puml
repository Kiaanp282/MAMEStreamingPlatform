@startuml mame

page 2x1

skinparam linetype ortho
skinparam ArrowColor black
skinparam shadowing false

skinparam class {
    BackgroundColor WhiteSmoke
    BorderColor black
}

skinparam package {
    BackgroundColor Linen
}

set namespaceSeparator ::

enum primitive_type
{
    INVALID
    LINE
    QUAD
}

class render_manager {
    +running_machine machine()
    +float max_update_rate()
}

running_machine --o render_manager

class osd_renderer {
    -osd_window  m_window
    +osd_window assert_window()
    {abstract} +int create()
    {abstract} +render_primitive_list get_primitives()
    {abstract} +int draw(const int update)
    {static} +osd_renderer make_for_type(int mode, osd_window window, int extra_flags)
}

note as note_osd_renderer_make_for_type
<b><color:Red>4)</color></b>
osd_renderer make_for_type() {
    return new renderer_XXX(window);
}
end note

render_primitive_list --o osd_renderer
render_primitive --o render_primitive_list
primitive_type -- render_primitive

class render_primitive {
    +primitive_type type
    +float width
    +render_color color
    +render_bounds bounds
    +render_texinfo texture
}

class render_primitive_list {
    void append(render_primitive prim)
}

class renderer_XXX extends osd_renderer {
    +int draw(const int update)
}

note as note_renderer_XXX
<b><color:Red>6)</color></b>
int draw(const int update) {
    auto win = assert_window();
    XXX_present();
}
end note

osd_window o-- renderer_XXX
osd_window o-- render_target
osd_window -- osd_renderer

class osd_window_t<TWindowHandle> extends osd_window

XXX_window_info -- renderer_XXX

class osd_window {    
    +render_primitive_list m_primlist
    +osd_renderer renderer()
    {abstract} +running_machine machine()
    {abstract} +render_target target()
    {abstract} +void update()
}

render_manager --o render_target
render_primitive_list --o render_target

class render_target
{
    +render_manager manager()
    +u32 width()
    +u32 height()
    +float pixel_aspect()
    +render_primitive_list get_primitives()
}

class XXX_window_info<XXX_Window> {
    +void update()
    +int window_init()
}

osd_window_t <|-- XXX_window_info
osd_common_t <|-- XXX_osd_interface

class XXX_osd_interface {
    +void init(running_machine machine)
    +bool video_init()
}

note as note_5_XXX_window_info
<b><color:Red>5)</color></b>
void update() {
    renderer().draw();
}
end note

note as note_4_XXX_window_info
<b><color:Red>3)</color></b>
int window_init() {
    osd_renderer::make_for_type();
}
end note

note as note_2_XXX_osd_interface
<b><color:Red>2)</color></b>
bool video_init() {
    new XXX_window_info();
}
end note

osd_window -- osd_common_t

osd_interface -- running_machine

osd_interface <|-- osd_common_t

class osd_interface {
	{abstract} +void init(running_machine machine)
	{abstract} +void update(bool skip_redraw)
	{abstract} +void input_update()
}

class osd_common_t {
    +osd_window s_window_list
    #sound_module m_sound
    #debug_module m_debugger
    #midi_module m_midi
    #input_module m_keyboard_input
    #input_module m_mouse_input
    #input_module m_lightgun_input
    #input_module m_joystick_input
    #output_module m_output
    #monitor_module m_monitor_module
    #osd_watchdog m_watchdog
    #vector<menu_item> m_sliders
    {abstract} + void init(running_machine machine)
    {abstract} + void update(bool skip_redraw)
    {abstract} + void input_update()
    {abstract} +bool video_init()
    {abstract} +bool window_init()
    +void init_subsystems()
}

note as note_osd_common_t_init_subsystems
<b><color:Red>1)</color></b>
void init_subsystems() {
    video_init();
    input_init();
}
end note

note as note_XXX_osd_interface_init
<b><color:Red>0)</color></b>
void init(running_machine machine) {
    osd_common_t::init_subsystems();
}
end note

osd_renderer .. note_osd_renderer_make_for_type
osd_common_t .. note_osd_common_t_init_subsystems
renderer_XXX .. note_renderer_XXX
XXX_osd_interface .. note_2_XXX_osd_interface
XXX_osd_interface .. note_XXX_osd_interface_init
XXX_window_info .. note_4_XXX_window_info
XXX_window_info .. note_5_XXX_window_info

@enduml