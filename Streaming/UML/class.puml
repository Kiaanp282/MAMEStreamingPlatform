@startuml mame

skinparam LineType ortho
skinparam ArrowColor black
skinparam Shadowing false

skinparam class {
    BackgroundColor WhiteSmoke
    BorderColor black
}

class osd_renderer {
    -osd_window  m_window
    +osd_window assert_window()
    {abstract} +int create()
    {abstract} +render_primitive_list get_primitives()
    {abstract} +int draw(const int update)
    {static} +osd_renderer make_for_type(int mode, osd_window window, int extra_flags)
}

class renderer_YYY extends osd_renderer {    
    +int create()
    +render_primitive_list get_primitives()    
    +int draw(const int update)
}

osd_window -- osd_renderer
renderer_YYY -- osd_renderer

class osd_window_t<TWindowHandle> extends osd_window {
    -TWindowHandle platform_window
    +TWindowHandle platform_window()
	+void set_platform_window(TWindowHandle window)
}

class osd_window {
    +HDC m_dc
    +render_primitive_list m_primlist
    +osd_renderer renderer()        
    {abstract} +render_target target()    
    {abstract} +running_machine machine()
    {abstract} +void update()    
}

class XXX_window_info<TWindowHandle> extends osd_window_t {    
    +int window_init()
    +void update()
}

osd_renderer -- XXX_window_info
osd_common_t -- XXX_osd_interface
XXX_window_info -- XXX_osd_interface

class XXX_osd_interface extends osd_common_t {
    +void init(running_machine machine)
    +void update(bool skip_redraw)
    +void input_update()
    +bool video_init()
    +bool window_init()
}

osd_window -- osd_common_t

class osd_interface {
	{abstract} +void init(running_machine machine)
	{abstract} +void update(bool skip_redraw)
	{abstract} +void input_update()
}

class osd_common_t extends osd_interface {
    #sound_module m_sound
    #midi_module m_midi
    #input_module m_keyboard_input
    #input_module m_mouse_input 
    #output_module m_output
    #monitor_module m_monitor_module
    +osd_window s_window_list
    {abstract} + void init(running_machine machine)
    {abstract} + void update(bool skip_redraw)
    {abstract} + void input_update()
    {abstract} +bool video_init()
    {abstract} +bool window_init()
    +void init_subsystems()
}

class sdlmain #Linen {
    +int main(int argc, string[] argv)
}

class emulator_info {
    +int start_frontend(emu_options options, osd_interface osd, vector<string> args)
    +void draw_user_interface(running_machine machine)
}

sdlmain -- emulator_info

class cli_frontend {
    +int execute(vector<string> args)
    +void start_execution(mame_machine_manager manager, vector<string> args)
}

class mame_machine_manager {
    +int execute()
}

class mame_ui_manager {
    +void update_and_render(render_container container)
}

class render_container {
    +void add_line(float x0, float y0, float x1, float y1, float width, rgb_t argb, u32 flags)
	+void add_quad(float x0, float y0, float x1, float y1, rgb_t argb, render_texture *texture, u32 flags)
	+void add_char(float x0, float y0, float height, float aspect, rgb_t argb, render_font &font, u16 ch)
	+void add_point(float x0, float y0, float diameter, rgb_t argb, u32 flags)
	+void add_rect(float x0, float y0, float x1, float y1, rgb_t argb, u32 flags)
}

mame_ui_manager -- render_container
mame_machine_manager -- mame_ui_manager

emulator_info -- mame_machine_manager
emulator_info -- cli_frontend
mame_machine_manager -- cli_frontend

class running_machine {
    +int run(bool quiet)
}

mame_machine_manager -- running_machine
running_machine -- video_manager
render_container -- screen_device

class video_manager {
    +void frame_update(bool from_debugger)
}

video_manager -- osd_interface
video_manager -- emulator_info
screen_device -- screen_bitmap

note bottom of XXX_window_info
TWindowHandle:
    -SDL_Window (SDLMame = All O.S.)
    -CoreWindow (UWP)
    -HWND (Win32)
    -std::any (mac)
end note

note bottom of renderer_YYY
Renderer:
    -bgfx {mac, SDLMame, UWP, Win32}
    -OpenGL {mac, SDLMame, Win32}
    -SDL1 {SDLMame}
    -SDL2 {SDLMame}
    -DirectX9 {Win32}
    -GDI+ {Win32}
end note

' class osd_stream #Lavender

@enduml