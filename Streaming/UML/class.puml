@startuml mame

skinparam Shadowing false
skinparam LineType ortho
skinparam ArrowColor black

skinparam class {
    BackgroundColor WhiteSmoke
    BorderColor black
}

class XXX_main #Linen {
    {static}+int main(int argc, string[] argv)
}

class XXX_osd_interface extends osd_common_t {
    +void init(running_machine machine)
    +void update(bool skip_redraw)
    +void input_update()
    +bool video_init()
    +bool window_init()
}

XXX_main -- XXX_osd_interface

class emulator_info {
    {static}+int start_frontend(emu_options options, osd_interface osd, vector<string> args)
    {static}+void draw_user_interface(running_machine machine)
}

XXX_main -- emulator_info
emulator_info -- running_machine

class cli_frontend {
    +int execute(vector<string> args)
    +void start_execution(mame_machine_manager manager, vector<string> args)
}

class mame_ui_manager {
    +void update_and_render(render_container container)
}

class render_container {
    +void add_line(x0, y0, x1, y1, width, rgb_t argb, flags)
	+void add_quad(x0, y0, x1, y1, rgb_t argb, render_texture texture, flags)
	+void add_char(x0, y0, height, aspect, rgb_t argb, render_font font, ch)
	+void add_point(x0, y0, diameter, rgb_t argb, flags)
	+void add_rect(x0, y0, x1, y1, rgb_t argb, flags)
}

mame_ui_manager -- render_container
mame_machine_manager -- mame_ui_manager

emulator_info -- mame_machine_manager
emulator_info -- cli_frontend
mame_machine_manager -- cli_frontend

class running_machine {
    -void start()
    +int run(bool quiet)
    +void pause()
    +void resume()
    +void toggle_pause()
}

mame_machine_manager -- running_machine
running_machine -- video_manager
render_container -- render_manager
running_machine -- render_manager
render_container -- screen_device

class render_manager {
    -running_machine m_machine
    -simple_list<render_target> m_targetlist
    -render_target m_ui_target
    -u32 m_live_textures
    -u64 m_texture_id
    -fixed_allocator<render_texture> m_texture_allocator
    -render_container m_ui_container
    -simple_list<render_container> m_screen_container_list
}

class screen_device {
    -int m_width
	-int m_height
	-rectangle m_visarea
}

class video_manager {
    +void frame_update(bool from_debugger)
}

class machine_manager {
    #osd_interface m_osd	
	#running_machine m_machine

    {abstract} +ui_manager create_ui(running_machine machine)
    {abstract} +void update_machine()
}

machine_manager -- osd_interface
machine_manager -- running_machine

class mame_machine_manager extends machine_manager {
    +int execute()
    +ui_manager create_ui(running_machine machine)
    +void update_machine()
}

running_machine -- osd_interface
video_manager -- osd_interface
video_manager -- emulator_info

class osd_renderer {
    -osd_window  m_window
    +osd_window assert_window()
    {abstract} +int create()
    {abstract} +render_primitive_list get_primitives()
    {abstract} +int draw(const int update)
    {static} +osd_renderer make_for_type(int mode, osd_window window, int extra_flags)
}

class renderer_YYY extends osd_renderer {    
    +int create()
    +render_primitive_list get_primitives()    
    +int draw(const int update)
    {static} +void init(running_machine machine)
	{static} +void exit()
}

class Multimedia_Library {
    +void load()
    +renderer create_renderer(TWindowHandle handle)
    +void present(renderer r)
    +void draw_line(x, y)
    +void draw_rectangle(x, y, w, h)
}

renderer_YYY -- Multimedia_Library
XXX_window_info -- Multimedia_Library

osd_window -- osd_renderer
renderer_YYY -- osd_renderer
renderer_YYY -- XXX_osd_interface

class osd_window_t<TWindowHandle> extends osd_window {
    -TWindowHandle platform_window
    +TWindowHandle platform_window()
	+void set_platform_window(TWindowHandle window)
}

class osd_window {
    +HDC m_dc
    +render_primitive_list m_primlist
    +osd_renderer renderer()        
    {abstract} +render_target target()    
    {abstract} +running_machine machine()
    {abstract} +void update()    
}

class XXX_window_info<TWindowHandle> extends osd_window_t {    
    +int window_init()
    +void update()
}

osd_renderer -- XXX_window_info
osd_common_t -- XXX_osd_interface
XXX_window_info -- XXX_osd_interface

osd_window -- osd_common_t

class osd_interface {
	{abstract} +void init(running_machine machine)
	{abstract} +void update(bool skip_redraw)
	{abstract} +void input_update()
}

class osd_common_t extends osd_interface {
    #sound_module m_sound
    #midi_module m_midi
    #input_module m_keyboard_input
    #input_module m_mouse_input 
    #output_module m_output
    #monitor_module m_monitor_module
    +osd_window s_window_list
    {abstract} + void init(running_machine machine)
    {abstract} + void update(bool skip_redraw)
    {abstract} + void input_update()
    {abstract} +bool video_init()
    {abstract} +bool window_init()
    +void init_subsystems()
}

' 'note bottom of XXX_window_info
' note as nTWindowHandle
' TWindowHandle:
'     -SDL_Window (SDLMame = All O.S.)
'     -CoreWindow (UWP)
'     -HWND (Windows)
'     -std::any (macOS)
' end note

' 'note bottom of renderer_YYY
' note as nrenderer_YYY
' Renderer:
'     -bgfx {macOS, SDLMame, UWP, Windows}
'     -OpenGL {macOS, SDLMame, Windows}
'     -SDL 1 {SDLMame}
'     -SDL 2 {SDLMame}
'     -DirectX 9 {Win32}
'     -GDI+ {Win32}
' end note

' note as nXXX
' O.S.:
'     -macOS 
'     -Windows
'     -UWP
'     -SDLMame = All O.S.
' end note

' nrenderer_YYY .. renderer_YYY
' nrenderer_YYY .. Multimedia_Library
' nTWindowHandle .. XXX_window_info
' nXXX .. XXX_main
' nXXX .. XXX_osd_interface
' nXXX .. XXX_window_info

@enduml